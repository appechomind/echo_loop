#!/usr/bin/env python3
"""
Gemini AI agent for EchoLoop automation system
"""

import google.generativeai as genai
import os
import logging
from dotenv import load_dotenv
from pathlib import Path

# Load environment variables
load_dotenv(Path(__file__).parent.parent / 'config' / '.env')

class GeminiAgent:
    """Gemini AI agent for processing refined suggestions."""
    
    def __init__(self):
        # Configure Gemini API with the API key from environment
        api_key = os.getenv('GEMINI_API_KEY')
        if not api_key:
            raise ValueError("GEMINI_API_KEY not found in environment variables")
        
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-pro')
        logging.info("Gemini agent initialized successfully")
    
    def process_input(self, input_text: str) -> str:
        """Process input through Gemini and return implementation."""
        try:
            # Create a prompt that emphasizes detailed code generation and implementation
            prompt = f"""Based on the following refined suggestions from a previous AI agent, generate a detailed and actionable implementation. Your output should be comprehensive and ready for execution.

{input_text}

Please provide:
1. **Specific code implementations** (e.g., Python, HTML, JavaScript) where applicable, presented in markdown code blocks.
2. **Detailed step-by-step procedures** for deployment or usage.
3. **Clear explanations and comments** within the code and prose.
4. **Best practices and considerations** for the implementation.
5. Ensure the output is well-structured and directly addresses the problem/task from the refined suggestions."""
            
            # Generate response from Gemini
            response = self.model.generate_content(prompt)
            return response.text
            
        except Exception as e:
            error_msg = f"Error during Gemini API processing: {str(e)}"
            logging.error(error_msg)
            return f"{error_msg}\nFalling back to a basic implementation outline."

def run_gemini_agent():
    """
    Main function to run the Gemini agent.
    Reads input from ai_2_out.txt, processes it through Gemini,
    and generates the final implementation to ai_3_out.txt.
    """
    try:
        # Initialize agent
        agent = GeminiAgent()
        
        # 1. Read input from chatgpt_agent's output (ai_2_out.txt)
        input_file = Path(__file__).parent.parent / 'data' / 'ai_2_out.txt'
        
        try:
            with open(input_file, "r", encoding="utf-8") as f:
                input_from_chatgpt = f.read().strip()
            if not input_from_chatgpt:
                print("ðŸ§  Gemini Agent: Warning: ai_2_out.txt is empty. Using default input.")
                input_from_chatgpt = "Generate a basic implementation plan for a web application."
        except FileNotFoundError:
            print("ðŸ§  Gemini Agent: Warning: ai_2_out.txt not found. Using default input.")
            input_from_chatgpt = "Generate a basic implementation plan for a web application."

        print(f"ðŸ§  Gemini Agent: Read from ai_2_out.txt: \"{input_from_chatgpt[:100]}...\"" if len(input_from_chatgpt) > 100 else f"ðŸ§  Gemini Agent: Read from ai_2_out.txt: \"{input_from_chatgpt}\"")

        # 2. Process with Gemini API
        gemini_response = agent.process_input(input_from_chatgpt)
        
        # 3. Format output for final use
        final_output = f"""---
ðŸ§  Gemini Final Implementation:

{gemini_response}

---
Note: This implementation was generated by the Gemini agent based on the refined suggestions from the previous agents in the chain.
"""
        
        # 4. Write to ai_3_out.txt
        output_file = Path(__file__).parent.parent / 'data' / 'ai_3_out.txt'
        with open(output_file, "w", encoding="utf-8") as f:
            f.write(final_output)
        
        print("ðŸ§  Gemini Agent: Wrote final implementation to ai_3_out.txt.")
        return True
        
    except Exception as e:
        logging.error(f"Error in Gemini agent: {str(e)}")
        print(f"ðŸ§  Gemini Agent: Error - {str(e)}")
        return False

if __name__ == "__main__":
    run_gemini_agent() 